Circular tour
Suppose there is a circle. There are N petrol pumps on that circle. You will be given two sets of data.
1. The amount of petrol that every petrol pump has.
2. Distance from that petrol pump to the next petrol pump.
Find a starting point where the truck can start to get through the complete circle without exhausting its petrol in between.
Note :  Assume for 1 litre petrol, the truck can go 1 unit of distance.
Example 1:
Input:
N = 4
Petrol = 4 6 7 4
Distance = 6 5 3 5
Output: 1

Your task is to complete the function tour() which takes the required data as inputs and returns an integer denoting a point from where a truck will be able to complete the circle (The truck will stop at each petrol pump and it has infinite capacity). If there exists multiple such starting points, then the function must return the first one out of those. (return -1 otherwise)

Expected Time Complexity: O(N)
Expected Auxiliary Space : O(1)

Constraints:
2 ≤ N ≤ 10000
1 ≤ petrol, distance ≤ 1000

code:
//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

struct petrolPump
{
    int petrol;
    int distance;
};


// } Driver Code Ends
/*
The structure of petrolPump is 
struct petrolPump
{
    int petrol;
    int distance;
};*/

/*You are required to complete this method*/
class Solution{
  public:
    int tour(petrolPump p[],int n)
    {
        int deficit = 0;
        int balance = 0;
        int start = 0;
        
        for(int i=0;i<n;i++)
        {
            balance += p[i].petrol -p[i].distance;
            if(balance < 0)
        {
            deficit+=balance;
            start = i+1;
            balance =0;
        }
    }
    if(deficit + balance >=0)
    {
        
        return start;
    }
    else
    {
       return -1; 
     }
}
};

#2 First non-repeating character in a stream
Given an input stream A of n characters consisting only of lower case alphabets. While reading characters from the stream, you have to tell which character has appeared only once in the stream upto that point. If there are many characters that have appeared only once, you have to tell which one of them was the first one to appear. If there is no such character then append '#' to the answer.
NOTE:
1. You need to find the answer for every i (0 <= i < n)
2. In order to find the solution for every i you need to consider the string from starting position till ith position.
Example 1:
Input: A = "aabc"
Output: "a#bb"

code:
//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
	public:
		string FirstNonRepeating(string A)
		{
		    map<char, int> count;
		    string ans = "";
		    queue<char> q;
		    
		    for(int i=0; i<A.length(); i++) 
		    {
		        char ch = A[i];
		        
		        q.push(ch);
		        count[ch]++;
		        
		        while(!q.empty()) {
		            if(count[q.front()] > 1)
		            {
		                q.pop();
		            }
		            else
		            {
		                ans.push_back(q.front());
		                break;
		            }
		        }
		        if(q.empty()){
		            ans.push_back('#');
		        }
		    }
		    return ans;
		}

};

#3Reverse First K elements of Queue
Given an input stream A of n characters consisting only of lower case alphabets. While reading characters from the stream, you have to tell which character has appeared only once in the stream upto that point. If there are many characters that have appeared only once, you have to tell which one of them was the first one to appear. If there is no such character then append '#' to the answer.

NOTE:
1. You need to find the answer for every i (0 <= i < n)
2. In order to find the solution for every i you need to consider the string from starting position till ith position.

Example 1:

Input: A = "aabc"
Output: "a#bb"
Your Task:
You don't need to read or print anything. Your task is to complete the function FirstNonRepeating() which takes A as input parameter and returns a string after processing the input stream.
 

Expected Time Complexity: O(n)
Expected Space Complexity: O(n)
 

Constraints:
1 <= n <= 105

code:
//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution
{
    public:
    
    queue<int> modifyQueue(queue<int> q, int k)
    {
    stack<int> s;
    
    for(int i = 0; i<k; i++) 
    {
        int val = q.front();
        q.pop();
        s.push(val);
    }
    
    while(!s.empty())
    {
        int val = s.top();
        s.pop();
        q.push(val);
    }
    
    int t = q.size()-k;
    
    while(t--) 
    {
        int val = q.front();
        q.pop();
        q.push(val);
    }
    
    return q;
    }
};
