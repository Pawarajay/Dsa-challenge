236. Lowest Common Ancestor of a Binary Tree

Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”
 
Example 1:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.
Example 2:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.
Example 3:

Input: root = [1,2], p = 1, q = 2
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [2, 105].
-109 <= Node.val <= 109
All Node.val are unique.
p != q

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root==NULL || root == p || root ==  q)
     {
            return root;
    }
     TreeNode* left =lowestCommonAncestor(root->left,p,q);
     
     TreeNode* right =lowestCommonAncestor(root->right,p,q);

     if(left == NULL) 
     {
        return right;
     }
     else if(right ==NULL)
     {
        return left;
     }
     else 
     {
        return root;
     }

    }
};

#101. Symmetric Tree

Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

Example 1:

Input: root = [1,2,2,3,4,4,3]
Output: true
Example 2:

Input: root = [1,2,2,null,3,null,3]
Output: false

Constraints:

The number of nodes in the tree is in the range [1, 1000].
-100 <= Node.val <= 100

class Solution {
    private:
   
    bool isSymmetricUtil(TreeNode* root1, TreeNode* root2) {
        if (root1 == NULL || root2 == NULL)
         {
            return root1 == root2;
        }
        return (root1->val == root2->val)
            && isSymmetricUtil(root1->left, root2->right)
            && isSymmetricUtil(root1->right, root2->left);
    }
public:
    bool isSymmetric(TreeNode* root) {
        if (!root)
         {
            return true;
        }
        return isSymmetricUtil(root->left, root->right); 
    }
};
