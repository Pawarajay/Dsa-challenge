Queue Reversa
Given a Queue Q containing N elements. The task is to reverse the Queue. Your task is to complete the function rev(), that reverses the N elements of the queue.
Example 1:
Input:
6
4 3 1 10 2 6
Output: 
6 2 10 1 3 4
Explanation: 
After reversing the given elements of the queue , the resultant queue will be 6 2 10 1 3 4.
Your Task: You need to complete the function rev that takes a queue as parameter and returns the reversed queue. The printing is done automatically by the driver code.
Expected Time Complexity : O(n)
Expected Auxilliary Space : O(n)
Constraints:
1 ≤ N ≤ 105
1 ≤ elements of Queue ≤ 105
code:
class Solution
{
    public:
    queue<int> rev(queue<int> q)
    {
      stack<int>s;
      
      while(!q.empty())
      {
          int element=q.front();
          q.pop();
          s.push(element);
      }
      
      while(!s.empty())
      {
          int element=s.top();
          s.pop();
          q.push(element);
      }
      return q;
    }
};

Q2.First negative in every window of size k
Given an array A[] of size N and a positive integer K, find the first negative integer for each and every window(contiguous subarray) of size K.

Example 1:
Input : 
N = 5
A[] = {-8, 2, 3, -6, 10}
K = 2
Output : 
-8 0 -6 -6
Explanation :
First negative integer for each window of size k
{-8, 2} = -8
{2, 3} = 0 (does not contain a negative integer)
{3, -6} = -6
{-6, 10} = -6

Your Task:  
You don't need to read input or print anything. Your task is to complete the function printFirstNegativeInteger() which takes the array A[], its size N and an integer K as inputs and returns the first negative number in every window of size K starting from the first till the end. If a window does not contain a negative integer , then return 0 for that window.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(K)
Constraints:
1 <= N <= 105
-105 <= A[i] <= 105
1 <= K <= N

code:
//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

vector<long long> printFirstNegativeInteger(long long int arr[],
                                             long long int n, long long int k);

// Driver program to test above functions
int main() {
    long long int t, i;
    cin >> t;
    while (t--) {
        long long int n;
        cin >> n;
        long long int arr[n];
        for (i = 0; i < n; i++) {
            cin >> arr[i];
        }
        long long int k;
        cin >> k;

        vector<long long> ans = printFirstNegativeInteger(arr, n, k);
        for (auto it : ans) cout << it << " ";
        cout << endl;
    }
    return 0;
}

// } Driver Code Ends


vector<long long> printFirstNegativeInteger(long long int A[],
                                             long long int N, long long int K) 
{
       deque<long long int>dq;
       
         vector<long long>ans;
         
         int negative = -1;
         
         for(int i=0;i<K;i++) 
         {
             if(A[i]<0) 
             {
                 dq.push_back(i);
             }
         }
         if(dq.size()>0) 
         {
             ans.push_back(A[dq.front()]);
         }
         else
         {
             ans.push_back(0);
         }

         for(int i =K;i<N;i++) {
             
             if(!dq.empty() && (i -dq.front())>=K )
             {
                 dq.pop_front();
             }

             if(A[i] < 0)
                dq.push_back(i);
 
            if(dq.size() > 0) {
                 ans.push_back(A[dq.front()]);
            }
            else
            {
                ans.push_back(0);
            }
         }
         return ans;
                                                 
 }
