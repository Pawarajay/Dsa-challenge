K Sized Subarray Maximum
Given an array arr[] of size N and an integer K. Find the maximum for each and every contiguous subarray of size K.

Example 1:

Input:
N = 9, K = 3
arr[] = 1 2 3 1 4 5 2 3 6
Output: 
3 3 4 5 5 5 6 
Explanation: 
1st contiguous subarray = {1 2 3} Max = 3
2nd contiguous subarray = {2 3 1} Max = 3
3rd contiguous subarray = {3 1 4} Max = 4
4th contiguous subarray = {1 4 5} Max = 5
5th contiguous subarray = {4 5 2} Max = 5
6th contiguous subarray = {5 2 3} Max = 5
7th contiguous subarray = {2 3 6} Max = 6

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(k)

Constraints:
1 ≤ N ≤ 106
1 ≤ K ≤ N
0 ≤ arr[i] ≤ 109

//code 
#include <bits/stdc++.h>
using namespace std;
class Solution
{
  public:

    vector <int> max_of_subarrays(int *arr, int n, int k)
    {
        deque<int> maxi;
        vector<int> ans;

        for (int i = 0; i < k; i++) {
            while (!maxi.empty() && arr[maxi.back()] <= arr[i])
            maxi.pop_back();
            maxi.push_back(i);
        }
        ans.push_back(arr[maxi.front()]);
        for (int i = k; i < n; i++) {
       
            if (!maxi.empty() && maxi.front() <= i - k)
                maxi.pop_front();

            while (!maxi.empty() && arr[maxi.back()] <= arr[i])
                maxi.pop_back();
            maxi.push_back(i);

            ans.push_back(arr[maxi.front()]);
        }

        return ans;
    }
};

//{ Driver Code Starts.

int main() {
	
	int t;
	cin >> t;
	
	while(t--){
	    
	    int n, k;
	    cin >> n >> k;
	    
	    int arr[n];
	    for(int i = 0;i<n;i++) 
	        cin >> arr[i];
	    Solution ob;
	    vector <int> res = ob.max_of_subarrays(arr, n, k);
	    for (int i = 0; i < res.size (); i++) 
	        cout << res[i] << " ";
	    cout << endl;
	    
	}
	
	return 0;
}
